[TESTS]
import unittest
from unittest.mock import patch
import os
import tempfile
import json
from app import app  # Import the Flask app module
from app import load_data  # Import load data function from module
from app import save_data  # Import save data function from module
from app import recipes  # Import recipes from module

class TestApp(unittest.TestCase):
    def setUp(self):
        self.app = app.test_client()
        self.temp_db_fd, app.config['DATABASE'] = tempfile.mkstemp()
        app.config['TESTING'] = True
        self.recipes = [
            {'name': 'Recipe 1', 'description': 'This is a test recipe', 'tools': ['Knife', 'Cutting Board'], 'ingredients': ['Apple', 'Orange'], 'extras': ['Cheese'], 'amounts': [1, 2]},
            {'name': 'Recipe 2', 'description': 'This is another test recipe', 'tools': ['Knife', 'Cutting Board'], 'ingredients': ['Apple', 'Orange'], 'extras': ['Cheese'], 'amounts': [1, 2]}
        ]
        with open(app.config['DATABASE'], 'w') as f:
            json.dump(self.recipes, f)

    def tearDown(self):
        os.close(self.temp_db_fd)
        os.unlink(app.config['DATABASE'])

    def test_load_data(self):
        with patch('builtins.open', return_value=open(app.config['DATABASE'], 'r')) as mock_open:
            load_data()
            mock_open.assert_called_once_with('recipes.json', 'r')
            self.assertEqual(recipes, self.recipes)

    def test_load_data_no_file(self):
        os.unlink(app.config['DATABASE'])
        load_data()
        self.assertEqual(recipes, [])

    def test_home(self):
        response = self.app.get('/')
        self.assertEqual(response.status_code, 200)

    def test_add_recipe(self):
        new_recipe = {
            'name': 'Recipe 3',
            'description': 'This is a third test recipe',
            'tools': ['Knife', 'Cutting Board'],
            'ingredients': ['Apple', 'Orange'],
            'extras': ['Cheese'],
            'amounts': [1, 2]
        }
        response = self.app.post('/add_recipe', data=new_recipe, follow_redirects=True)
        self.assertEqual(response.status_code, 200)
        self.assertIn(new_recipe, recipes)

    def test_view_recipes(self):
        response = self.app.get('/view_recipes')
        self.assertEqual(response.status_code, 200)

    def test_search(self):
        response = self.app.get('/search?term=recipe')
        self.assertEqual(response.status_code, 200)
        self.assertIn(b'Recipe 1', response.data)
        self.assertIn(b'Recipe 2', response.data)
        self.assertNotIn(b'Recipe 3', response.data)

    def test_search_no_results(self):
        response = self.app.get('/search?term=apple')
        self.assertEqual(response.status_code, 200)
        self.assertNotIn(b'Recipe 1', response.data)
        self.assertNotIn(b'Recipe 2', response.data)
        self.assertNotIn(b'Recipe 3', response.data)

if __name__ == '__main__':
    unittest.main()
[/TESTS]