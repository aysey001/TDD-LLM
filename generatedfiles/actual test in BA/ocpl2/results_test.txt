[TESTS]
import unittest
import json
from flask import Flask, request, jsonify
from unittest.mock import patch
import os
import tempfile

from quiz import app  # Import the Flask app

class TestQuiz(unittest.TestCase):
    def setUp(self):
        self.app = app.test_client()
        self.temp_db_fd, app.config['DATABASE'] = tempfile.mkstemp()
        app.config['TESTING'] = True
        self.questions = [
            {
                'title': 'What is the capital of France?',
                'description': 'France is a beautiful country with a rich history and culture.',
                'option1': 'Paris',
                'option2': 'London',
                'option3': 'Berlin',
                'option4': 'Rome',
                'answer': 'Paris'
            },
            {
                'title': 'What is the currency of India?',
                'description': 'India is a large and diverse country with a rich history and culture.',
                'option1': 'US Dollar',
                'option2': 'Indian Rupee',
                'option3': 'Euro',
                'option4': 'Pound',
                'answer': 'Indian Rupee'
            },
            {
                'title': 'What is the largest planet in our solar system?',
                'description': 'Our solar system has eight planets, with Jupiter being the largest.',
                'option1': 'Jupiter',
                'option2': 'Earth',
                'option3': 'Saturn',
                'option4': 'Mars',
                'answer': 'Jupiter'
            }
        ]
        with open(app.config['DATABASE'], 'w') as f:
            json.dump(self.questions, f)

    def tearDown(self):
        os.close(self.temp_db_fd)
        os.unlink(app.config['DATABASE'])

    def test_load_data(self):
        with patch('builtins.open', return_value=open(app.config['DATABASE'], 'r')) as mock_open:
            app.load_data()
            mock_open.assert_called_once_with('questions.json', 'r')
            self.assertEqual(app.questions, self.questions)

    def test_load_data_no_file(self):
        os.unlink(app.config['DATABASE'])
        app.load_data()
        self.assertEqual(app.questions, [])

    def test_add_question(self):
        new_question = {
            'title': 'What is the smallest country in the world?',
            'description': 'Vatican City is a sovereign city-state located within Rome, Italy.',
            'option1': 'Monaco',
            'option2': 'San Marino',
            'option3': 'Vatican City',
            'option4': 'Liechtenstein',
            'answer': 'Vatican City'
        }
        response = self.app.post('/add_question', data=new_question)
        self.assertEqual(response.status_code, 200)
        self.assertIn(new_question, app.questions)

    def test_delete_question(self):
        response = self.app.get('/delete_question/0', follow_redirects=True)
        self.assertEqual(response.status_code, 200)
        self.assertNotIn(self.questions[0], app.questions)

    def test_view_questions(self):
        response = self.app.get('/questions')
        self.assertEqual(response.status_code, 200)

    def test_view_question(self):
        response = self.app.get('/question/0')
        self.assertEqual(response.status_code, 200)

if __name__ == '__main__':
    unittest.main()
[/TESTS]