[TESTS]
import unittest
from unittest.mock import patch
import os
import tempfile
import json

import quiz  # Import the Flask app


class TestApp(unittest.TestCase):
    def setUp(self):
        self.app = quiz.app.test_client()
        self.temp_db_fd, quiz.app.config['DATABASE'] = tempfile.mkstemp()
        quiz.app.config['TESTING'] = True
        self.questions = [
            {'title': 'What is 1+1?', 'description': 'A basic math question', 'options': ['1', '2', '3'], 'booleans': [False, False, True]},
            {'title': 'What is 2+2?', 'description': 'Another basic math question', 'options': ['3', '4', '5'], 'booleans': [False, True, False]}
        ]
        with open(quiz.app.config['DATABASE'], 'w') as f:
            json.dump(self.questions, f)

    def tearDown(self):
        os.close(self.temp_db_fd)
        os.unlink(quiz.app.config['DATABASE'])

    def test_load_data(self):
        with patch('builtins.open', return_value=open(quiz.app.config['DATABASE'], 'r')) as mock_open:
            quiz.load_data()
            mock_open.assert_called_once_with('questions.json', 'r')
            self.assertEqual(quiz.questions, self.questions)

    def test_load_data_no_file(self):
        os.unlink(quiz.app.config['DATABASE'])
        quiz.load_data()
        self.assertEqual(quiz.questions, [])

    def test_home(self):
        response = self.app.get('/')
        self.assertEqual(response.status_code, 200)

    def test_add_question_get(self):
        response = self.app.get('/add_question')
        self.assertEqual(response.status_code, 200)

    def test_add_question_post(self):
        new_question = {
            'title': 'What is 3+3?',
            'description': 'A question with multiple options',
            'options': ['6', '7', '8'],
            'booleans': [False, True, False]
        }
        response = self.app.post('/add_question', data=new_question, follow_redirects=True)
        self.assertEqual(response.status_code, 200)
        self.assertIn(new_question, quiz.questions)

    def test_delete_question(self):
        response = self.app.get('/delete_question/0', follow_redirects=True)
        self.assertEqual(response.status_code, 200)
        self.assertNotIn(self.questions[0], quiz.questions)

    def test_question(self):
        response = self.app.get('/question/0')
        self.assertEqual(response.status_code, 200)

    def test_answer(self):
        response = self.app.get('/answer/0/2', follow_redirects=True)
        self.assertEqual(response.status_code, 200)
        self.assertIn('Correct!', response.data.decode())

if __name__ == '__main__':
    unittest.main()
[/TESTS]